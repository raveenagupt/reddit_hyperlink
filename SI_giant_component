import networkx as nx
import csv
import random
import matplotlib.pyplot as plt

# Load graph edges (directed graph)
G = nx.DiGraph()

# Load the graph data
with open("graph_edges.csv") as file:
    tsv_file = csv.reader(file, delimiter=",")
    for line in tsv_file:
        G.add_edge(line[0], line[1])  # Add edge (source, target)

# Load community assignments
community_assignments = {}
with open("community_assignments.csv") as file:
    tsv_file = csv.reader(file, delimiter=",")
    next(tsv_file)  # Skip the header row
    for line in tsv_file:
        community_assignments[line[0]] = int(line[1])  # Map subreddit to community

# Function to simulate the infection spread
def spread_infection(initial_infected_nodes, G, community_assignments, steps=10):
    infected = set(initial_infected_nodes)  # Set of initially infected nodes
    infected_over_time = [len(infected)]  # Track infected nodes per step

    # Define probabilities
    in_community_prob = 0.2  # Higher probability for same community
    out_community_prob = 0.1  # Lower probability for different community

    # Simulation steps
    for step in range(steps):
        new_infected = set()
        for node in list(infected):
            # Look at the neighbors (outgoing edges from the current node)
            for neighbor in G.neighbors(node):
                if neighbor not in infected:
                    # Check if the neighbor is in the same community
                    if community_assignments.get(node) == community_assignments.get(neighbor):
                        if random.random() < in_community_prob:
                            new_infected.add(neighbor)
                    else:
                        if random.random() < out_community_prob:
                            new_infected.add(neighbor)
        
        # Add newly infected nodes to the infected set
        infected.update(new_infected)
        infected_over_time.append(len(infected))  # Track infected nodes count

        print(f"Step {step+1}: Infected nodes: {len(infected)}")

    return infected_over_time

# Function to delete hubs progressively for specified numbers and track giant component size
def delete_hubs_and_track_component_sizes(G, hub_counts=[1, 2, 5, 10]):
    # Calculate the degree of each node and sort by degree
    node_degrees = {node: G.degree(node) for node in G.nodes()}
    sorted_nodes_by_degree = sorted(node_degrees, key=node_degrees.get, reverse=True)

    # Store the initial giant component size
    initial_giant_component = max(nx.strongly_connected_components(G), key=len)
    initial_size = len(initial_giant_component)
    print(f"Initial giant component size: {initial_size}")

    # Track deletions and giant component sizes
    deletions = []
    component_sizes = []

    # For each specified number of hubs to delete
    for count in hub_counts:
        # Delete the top `count` nodes (hubs)
        nodes_to_delete = sorted_nodes_by_degree[:count]
        G.remove_nodes_from(nodes_to_delete)

        # After deleting nodes, check the new giant component size
        giant_components = list(nx.strongly_connected_components(G))
        largest_component = max(giant_components, key=len)
        current_size = len(largest_component)

        # Track the current state for plotting
        deletions.append(count)
        component_sizes.append(current_size)

        # Optionally print the current size of the giant component
        print(f"After deleting {count} hubs, giant component size: {current_size}")

    return deletions, component_sizes

# Example usage: infect multiple specific nodes (subreddits)
initial_infected_nodes = ["askreddit", "pcmasterrace"]  # Multiple seeds
infection_data = spread_infection(initial_infected_nodes, G, community_assignments)

# Delete hubs for different counts (1, 2, 5, 10) and track giant component sizes
deletions, component_sizes = delete_hubs_and_track_component_sizes(G, hub_counts=[1, 2, 5, 10])

# Plot the number of hubs deleted vs. giant component size
plt.figure(figsize=(10, 6))
plt.plot(deletions, component_sizes, marker='o', linestyle='-', color='b')
plt.xlabel("Number of Hubs Deleted")
plt.ylabel("Giant Component Size")
plt.title("Giant Component Size vs. Number of Hubs Deleted")
plt.grid(True)
plt.show()

